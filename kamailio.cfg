#!KAMAILIO
# #!define WITH_SIPCAPTURE
#
# Kamailio (OpenSER) SIP Server v4.4 - default configuration script
#     - web: http://www.kamailio.org
#     - git: http://sip-router.org
#
# Direct your questions about this file to: <sr-users@lists.sip-router.org>
#
# Refer to the Core CookBook at http://www.kamailio.org/wiki/
# for an explanation of possible statements, functions and parameters.
#
# Several features can be enabled using '#!define WITH_FEATURE' directives:
#
# *** To run in debug mode:
#		define WITH_DEBUG
# 
# *** To enable mysql:
#!define WITH_MYSQL
#
# *** To enable authentication execute:
#     - enable mysql
#!define WITH_AUTH
#     - add users using 'kamctl'
#
# *** To enable IP authentication execute:
#     - enable mysql
#     - enable authentication
#     - define WITH_IPAUTH
#     - add IP addresses with group id '1' to 'address' table
#
# *** To enable persistent user location execute:
#     - enable mysql
#!define WITH_USRLOCDB
#
# *** To enable presence server execute:
#     - enable mysql
#!define WITH_PRESENCE
#
# *** To enable nat traversal execute:
#!define WITH_NAT
#     - install RTPProxy: http://www.rtpproxy.org
#     - start RTPProxy:
#        rtpproxy -l _your_public_ip_ -s udp:localhost:7722
#     - option for NAT SIP OPTIONS keepalives: WITH_NATSIPPING
#
# *** To enable PSTN gateway routing execute:
#     - define WITH_PSTN
#     - set the value of pstn.gw_ip
#     - check route[PSTN] for regexp routing condition
#
# *** To enable database aliases lookup execute:
#     - enable mysql
#     - define WITH_ALIASDB
#
# *** To enable speed dial lookup execute:
#     - enable mysql
#     - define WITH_SPEEDDIAL
#
# *** To enable multi-domain support execute:
#     - enable mysql
#!define WITH_MULTIDOMAIN
#
# *** To enable TLS support execute:
#     - adjust CFGDIR/tls.cfg as needed
#     - define WITH_TLS
#
# *** To enable XMLRPC support execute:
#     - define WITH_XMLRPC
#     - adjust route[XMLRPC] for access policy
#
# *** To enable anti-flood detection execute:
#     - adjust pike and htable=>ipban settings as needed (default is
#       block if more than 16 requests in 2 seconds and ban for 300 seconds)
#     - define WITH_ANTIFLOOD
#
# *** To block 3XX redirect replies execute:
#     - define WITH_BLOCK3XX
#
# *** To enable VoiceMail routing execute:
#     - define WITH_VOICEMAIL
#     - set the value of voicemail.srv_ip
#     - adjust the value of voicemail.srv_port
#
# *** To enhance accounting execute:
#     - enable mysql
#	  - define WITH_ACCDB
#     - add following columns to database
#!ifdef ACCDB_COMMENT
  ALTER TABLE acc ADD COLUMN src_user VARCHAR(64) NOT NULL DEFAULT '';
  ALTER TABLE acc ADD COLUMN src_domain VARCHAR(128) NOT NULL DEFAULT '';
  ALTER TABLE acc ADD COLUMN src_ip varchar(64) NOT NULL default '';
  ALTER TABLE acc ADD COLUMN dst_ouser VARCHAR(64) NOT NULL DEFAULT '';
  ALTER TABLE acc ADD COLUMN dst_user VARCHAR(64) NOT NULL DEFAULT '';
  ALTER TABLE acc ADD COLUMN dst_domain VARCHAR(128) NOT NULL DEFAULT '';
  ALTER TABLE missed_calls ADD COLUMN src_user VARCHAR(64) NOT NULL DEFAULT '';
  ALTER TABLE missed_calls ADD COLUMN src_domain VARCHAR(128) NOT NULL DEFAULT '';
  ALTER TABLE missed_calls ADD COLUMN src_ip varchar(64) NOT NULL default '';
  ALTER TABLE missed_calls ADD COLUMN dst_ouser VARCHAR(64) NOT NULL DEFAULT '';
  ALTER TABLE missed_calls ADD COLUMN dst_user VARCHAR(64) NOT NULL DEFAULT '';
  ALTER TABLE missed_calls ADD COLUMN dst_domain VARCHAR(128) NOT NULL DEFAULT '';
#!endif

####### Include Local Config If Exists #########
import_file "kamailio-local.cfg"

####### Defined Values #########

import_file "settings.cfg"

# *** Value defines - IDs used later in config

#!ifdef WITH_MULTIDOMAIN
# - the value for 'use_domain' parameters
#!define MULTIDOMAIN 1
#!else
#!define MULTIDOMAIN 0
#!endif

# - flags
#   FLT_ - per transaction (message) flags
#	FLB_ - per branch flags
#!define FLT_ACC 1
#!define FLT_ACCMISSED 2
#!define FLT_ACCFAILED 3
#!define FLT_NATS 5

#!define FLB_NATB 6
#!define FLB_NATSIPPING 7
#!define FLT_DLG 9
#!define FLT_DLGINFO 10

####### Global Parameters #########

### LOG Levels: 3=DBG, 2=INFO, 1=NOTICE, 0=WARN, -1=ERR
#!ifdef WITH_DEBUG
debug=4
log_stderror=yes
#!else
debug=2
log_stderror=no
#!endif

memdbg=5
memlog=5
mhomed=1

log_facility=LOG_LOCAL7

# number of SIP routing processes
children=4

/* uncomment the next line to disable TCP (default on) */
#disable_tcp=yes

/* uncomment the next line to disable the auto discovery of local aliases
   based on reverse DNS on IPs (default on) */
#auto_aliases=no

/* add local domain aliases */


alias=DOMAIN


/* uncomment and configure the following line if you want Kamailio to
   bind on a specific interface/port/proto (default bind on all available) */


advertised_address=DOMAIN
listen=INTERNIP:5060
listen=LOCALIP:5060
listen=INTERNIP:50600
listen=LOCALIP:50600
listen=INTERNIP:50601
listen=LOCALIP:50601
listen=INTERNIP:50602
listen=LOCALIP:50602
listen=INTERNIP:50603
listen=LOCALIP:50603
listen=INTERNIP:50604
listen=LOCALIP:50604
listen=INTERNIP:50605
listen=LOCALIP:50605


/* port to listen to */
#port=5060

#!ifdef WITH_TLS
enable_tls=yes
#!endif

# life time of TCP connection when there is no traffic
# - a bit higher than registration expires to cope with UA behind NAT
tcp_connection_lifetime=3605

####### Custom Parameters #########

# These parameters can be modified runtime via RPC interface
# - see the documentation of 'cfg_rpc' module.
#
# Format: group.id = value 'desc' description
# Access: $sel(cfg_get.group.id) or @cfg_get.group.id
#

#!ifdef WITH_PSTN
# PSTN GW Routing
#
# - pstn.gw_ip: valid IP or hostname as string value, example:
# pstn.gw_ip = "10.0.0.101" desc "My PSTN GW Address"
#
# - by default is empty to avoid misrouting
pstn.gw_ip = "" desc "PSTN GW Address"
pstn.gw_port = "" desc "PSTN GW Port"
#!endif

#!ifdef WITH_VOICEMAIL
# VoiceMail Routing on offline, busy or no answer
#
# - by default Voicemail server IP is empty to avoid misrouting
voicemail.srv_ip = "" desc "VoiceMail IP Address"
voicemail.srv_port = "5060" desc "VoiceMail Port"
#!endif

####### Modules Section ########

# set paths to location of modules (to sources or installation folders)
#!ifdef WITH_SRCPATH
mpath="modules/"
#!else
mpath="/usr/local/lib64/kamailio/modules/"
#!endif

#!ifdef WITH_MYSQL
#loadmodule "db_mysql.so"
loadmodule "db_postgres.so"
loadmodule "db_unixodbc.so"
#!endif

loadmodule "mi_fifo.so"
loadmodule "kex.so"
loadmodule "corex.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "permissions.so"
loadmodule "textops.so"
loadmodule "sqlops.so" 
loadmodule "avpops.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "cfg_rpc.so"
loadmodule "mi_rpc.so"
loadmodule "acc.so"
loadmodule "dialog.so"
loadmodule "uac.so"
loadmodule "xhttp.so"
loadmodule "xhttp_rpc.so" 



#!ifdef WITH_AUTH
loadmodule "auth.so"
loadmodule "auth_db.so"
#!ifdef WITH_IPAUTH
#loadmodule "permissions.so"
#!endif
#!endif

#!ifdef WITH_ALIASDB
loadmodule "alias_db.so"
#!endif

#!ifdef WITH_SPEEDDIAL
loadmodule "speeddial.so"
#!endif

#!ifdef WITH_SIPCAPTURE
loadmodule "siptrace.so"
#!endif


#!ifdef WITH_MULTIDOMAIN
loadmodule "domain.so"
#!endif

#!ifdef WITH_PRESENCE
loadmodule "presence.so"
loadmodule "presence_xml.so"
loadmodule "presence_dialoginfo.so"
loadmodule "pua.so"
loadmodule "pua_dialoginfo.so"
#!endif

#!ifdef WITH_NAT
loadmodule "nathelper.so"
loadmodule "rtpproxy.so"
loadmodule "rtpengine.so"
#!endif

#!ifdef WITH_TLS
loadmodule "tls.so"
#!endif

#!ifdef WITH_ANTIFLOOD
loadmodule "htable.so"
loadmodule "pike.so"
#!endif

#!ifdef WITH_XMLRPC
loadmodule "xmlrpc.so"
#!endif

#!ifdef WITH_DEBUG
loadmodule "debugger.so"
#!endif




# ----------------- setting module-specific parameters ---------------
#modparam("db_postgres", "tcp_keepalive", 600)
modparam("db_unixodbc", "ping_interval", 30)
modparam("db_unixodbc", "auto_reconnect", 1)

modparam("sqlops","sqlcon",SQLOPSURL)
# ----- mi_fifo params -----
#modparam("mi_fifo", "fifo_name", "/var/run/kamailio/kamailio_fifo")

# ----- ctl params -----
#modparam("ctl", "binrpc", "unix://var/run/kamailio/kamailio_ctl")

# ----- tm params -----
# auto-discard branches from previous serial forking leg
modparam("tm", "failure_reply_mode", 3)
# default retransmission timeout: 30sec
modparam("tm", "fr_timer", 30000)
# default invite retransmission timeout after 1xx: 120sec
modparam("tm", "fr_inv_timer", 120000)


# ----- rr params -----
# set next param to 1 to add value to ;lr param (helps with some UAs)
modparam("rr", "enable_full_lr", 0)
# do not append from tag to the RR (no need for this script)
modparam("rr", "append_fromtag", 1)


# ----- registrar params -----
modparam("registrar", "method_filtering", 1)
/* uncomment the next line to disable parallel forking via location */
# modparam("registrar", "append_branches", 0)
/* uncomment the next line not to allow more than 10 contacts per AOR */
#modparam("registrar", "max_contacts", 10)
# max value for expires of registrations
modparam("registrar", "max_expires", 3600)
# set it to 1 to enable GRUU
modparam("registrar", "gruu_enabled", 0)


# ----- acc params -----
/* what special events should be accounted ? */
modparam("acc", "early_media", 0)
modparam("acc", "report_ack", 0)
modparam("acc", "report_cancels", 0)
/* by default ww do not adjust the direct of the sequential requests.
   if you enable this parameter, be sure the enable "append_fromtag"
   in "rr" module */
modparam("acc", "detect_direction", 0)
/* account triggers (flags) */
modparam("acc", "log_flag", FLT_ACC)
modparam("acc", "log_missed_flag", FLT_ACCMISSED)
modparam("acc", "log_extra",
	"src_user=$fU;src_domain=$fd;src_ip=$si;"
	"dst_ouser=$tU;dst_user=$rU;dst_domain=$rd")
modparam("acc", "failed_transaction_flag", FLT_ACCFAILED)
/* enhanced DB accounting */
#!ifdef WITH_ACCDB
modparam("acc", "db_flag", FLT_ACC)
modparam("acc", "db_missed_flag", FLT_ACCMISSED)
modparam("acc", "db_url", DBURL)
modparam("acc", "db_extra",
	"src_user=$fU;src_domain=$fd;src_ip=$si;"
	"dst_ouser=$tU;dst_user=$rU;dst_domain=$rd")
#!endif


# ----- usrloc params -----
/* enable DB persistency for location entries */
#!ifdef WITH_USRLOCDB
modparam("usrloc", "db_url", DBURL)
modparam("usrloc", "db_mode", 2)
modparam("usrloc", "use_domain", MULTIDOMAIN)
#!endif


# ----- auth_db params -----
#!ifdef WITH_AUTH
modparam("auth_db", "db_url", DBURL)
modparam("auth_db", "calculate_ha1", 1)
modparam("auth_db", "use_domain", 0)
modparam("auth_db", "password_column", "password")
modparam("auth_db", "load_credentials", "")
#modparam("auth_db", "use_domain", MULTIDOMAIN)

# ----- permissions params -----
#		ifdef WITH_IPAUTH
modparam("permissions", "db_url", DBURL)
modparam("permissions", "db_mode", 1)
#		endif

#!endif


# ----- alias_db params -----
#!ifdef WITH_ALIASDB
modparam("alias_db", "db_url", DBURL)
modparam("alias_db", "use_domain", MULTIDOMAIN)
#!endif


# ----- speeddial params -----
#!ifdef WITH_SPEEDDIAL
modparam("speeddial", "db_url", DBURL)
modparam("speeddial", "use_domain", MULTIDOMAIN)
#!endif


# ----- domain params -----
#!ifdef WITH_MULTIDOMAIN
modparam("domain", "db_url", DBURL)
# register callback to match myself condition with domains list
modparam("domain", "register_myself", 1)
#!endif


#!ifdef WITH_PRESENCE
# ----- presence params -----
modparam("presence", "db_url", DBURL)
modparam("presence", "server_address", SIPURI) 
modparam("presence", "send_fast_notify", 0)
modparam("presence", "db_update_period", 20)
modparam("presence", "clean_period", 40)
modparam("presence", "subs_db_mode", 2)
modparam("presence", "fetch_rows", 1000)



# ----- presence_xml params -----
modparam("presence_xml", "db_url", DBURL)
modparam("presence_xml", "force_active", 1)

#-------presence_dialoginfo params -----
modparam("presence_dialoginfo", "force_single_dialog", 0)

# ----- pua params -----
modparam("pua", "db_url", DBURL)
modparam("pua", "db_mode", 2)
modparam("pua", "update_period", 60)
modparam("pua", "dlginfo_increase_version", 0)
modparam("pua", "reginfo_increase_version", 0)
modparam("pua", "check_remote_contact", 1)
modparam("pua", "fetch_rows", 1000)

# ----- pua_dialoginfo params -----
modparam("pua_dialoginfo", "include_callid", 1)
modparam("pua_dialoginfo", "send_publish_flag", 10)
modparam("pua_dialoginfo", "caller_confirmed", 0)
modparam("pua_dialoginfo", "include_tags", 1)
modparam("pua_dialoginfo", "override_lifetime", 124)

#!endif


#!ifdef WITH_NAT
# ----- rtpproxy params -----
#modparam("rtpproxy", "rtpproxy_sock", "udp:127.0.0.1:7724")
modparam("rtpengine","rtpengine_sock","udp:127.0.0.1:7724")

# ----- nathelper params -----
modparam("nathelper", "natping_interval", 15)
modparam("nathelper", "ping_nated_only", 0)
modparam("nathelper", "sipping_bflag", FLB_NATSIPPING)
modparam("nathelper", "sipping_from", NATPINGER)

# params needed for NAT traversal in other modules
modparam("nathelper|registrar", "received_avp", "$avp(RECEIVED)")
modparam("usrloc", "nat_bflag", FLB_NATB)
#!endif

#-----uac params -------
modparam("uac","restore_mode","auto")
modparam("uac","reg_db_url", DBURL)
modparam("uac", "reg_db_table", "uacreg")
modparam("uac", "reg_timer_interval", 20)
modparam("uac", "reg_retry_interval",120)
modparam("uac", "reg_contact_addr",EXTERNIP)
modparam("uac","auth_realm_avp","$avp(s:realm)")
modparam("uac","auth_username_avp","$avp(s:uname)")
modparam("uac","auth_password_avp","$avp(s:passwd)") 

 # ----- dialog params
#modparam("dialog", "db_url",DBURL)
#modparam("dialog", "db_mode", 1)
#modparam("dialog","table_name","dialog")
modparam("dialog", "timeout_avp", "$avp(i:10)")
modparam("dialog", "dlg_flag", 4)
modparam("dialog", "initial_cbs_inscript", 1)
modparam("dialog", "profiles_with_value", "caller")
#modparam("dialog", "default_timeout", 43200)
modparam("dialog", "track_cseq_updates", 1)
modparam("dialog", "enable_stats", 1)
modparam("dialog", "dlg_flag", FLT_DLG)

#!ifdef WITH_TLS
# ----- tls params -----
modparam("tls", "config", "/usr/local/etc/kamailio/tls.cfg")
#!endif


#!ifdef WITH_ANTIFLOOD
# ----- pike params -----
modparam("pike", "sampling_time_unit", 2)
modparam("pike", "reqs_density_per_unit", 16)
modparam("pike", "remove_latency", 4)


# ----- htable params -----
# ip ban htable with autoexpire after 5 minutes
modparam("htable", "htable", "ipban=>size=8;autoexpire=300;")
#!endif


#!ifdef WITH_XMLRPC
# ----- xmlrpc params -----
modparam("xmlrpc", "route", "XMLRPC");
modparam("xmlrpc", "url_match", "^/RPC")
#!endif

#!ifdef WITH_DEBUG
# ----- debugger params -----
modparam("debugger", "cfgtrace", 1)
modparam("debugger", "log_level_name", "exec")
#!endif

#!ifdef WITH_SIPCAPTURE
            modparam("siptrace", "duplicate_uri", HOMERURI)
            modparam("siptrace", "hep_mode_on", 1)
            modparam("siptrace", "trace_to_database", 0)
            modparam("siptrace", "trace_flag", 22)
            modparam("siptrace", "trace_on", 1)
#!endif





# ----- xhttp params ------

modparam("xhttp", "url_match", "^/rpc/")

# ----- xhttp_rpc params ------
modparam("xhttp_rpc", "xhttp_rpc_root", "http_rpc")  


####### Routing Logic ########


# Main SIP request routing logic
# - processing of any incoming SIP request starts with this route
# - note: this is the same as route { ... }

event_route[xhttp:request] {
   
    set_reply_close();
    set_reply_no_connect();
		
		
	$var(xhttp_rpc_root) = $(hu{s.substr,0,9});
	if ($var(xhttp_rpc_root) == "/http_rpc"){
		dispatch_xhttp_rpc();
	}
}


request_route {

#	sip_trace();
 #       setflag(22);

#	if (!allow_address("1", "$si", "$sp")) {
#		xlog("L_INFO","UNTRUSTED $si:$sp");
#		sl_send_reply("403", "Forbidden");
#		exit;
#	};


	# per request initial checks
	route(REQINIT);

	# NAT detection
	route(NATDETECT);

	# CANCEL processing
	if (is_method("CANCEL")) {
		if (t_check_trans()) {
			route(RELAY);
		}
		exit;
	}

    #handle BLF requests
    if( is_method("PUBLISH|SUBSCRIBE"))
    route(BLF);

	# handle requests within SIP dialogs
	route(WITHINDLG);

	### only initial requests (no To tag)

	# handle retransmissions
	if(t_precheck_trans()) {
		t_check_trans();
		exit;
	}
	t_check_trans();

	# authentication
	route(AUTH);

	# record routing for dialog forming requests (in case they are routed)
	# - remove preloaded route headers
	remove_hf("Route");
	if (is_method("INVITE|SUBSCRIBE")) {
		record_route_preset(EXTERNIP);
	}

	# account only INVITEs
	if (is_method("INVITE")) {
		setflag(FLT_ACC); # do accounting
	}

	# handle registrations
	route(REGISTRAR);

	if ($rU==$null) {
		# request with no Username in RURI
		sl_send_reply("484","Address Incomplete");
		exit;
	}

	# dispatch destinations to PSTN
	route(PSTN);

	# user location service
	#route(LOCATION);
	route(DIRECTION);
	route(RELAY);
}

# Wrapper for relaying requests
route[RELAY] {

	
	# enable additional event routes for forwarded requests
	# - serial forking, RTP relaying handling, a.s.o.
	if (is_method("INVITE|BYE|SUBSCRIBE|UPDATE")) {
		if(!t_is_set("branch_route")) t_on_branch("MANAGE_BRANCH");
	}
	if (is_method("INVITE|SUBSCRIBE|UPDATE")) {
		if(!t_is_set("onreply_route")) t_on_reply("MANAGE_REPLY");
	}
	if (is_method("INVITE")) {
		if(!t_is_set("failure_route")) t_on_failure("MANAGE_FAILURE");
	}
   

	##xlog("L_INFO","relay routing");
	if (!t_relay()) {
		sl_reply_error();
	}
	exit;
}

# Per SIP request initial checks
route[REQINIT] {
#!ifdef WITH_ANTIFLOOD
	# flood detection from same IP and traffic ban for a while
	# be sure you exclude checking trusted peers, such as pstn gateways
	# - local host excluded (e.g., loop to self)
	if(src_ip!=myself) {
		if($sht(ipban=>$si)!=$null) {
			# ip is already blocked
			xdbg("request from blocked IP - $rm from $fu (IP:$si:$sp)\n");
			exit;
		}
		if (!pike_check_req()) {
			xlog("L_ALERT","ALERT: pike blocking $rm from $fu (IP:$si:$sp)\n");
			$sht(ipban=>$si) = 1;
			exit;
		}
	}
	if($ua =~ "friendly-scanner|sipcli") {
		# silent drop for scanners - uncomment next line if want to reply
		# sl_send_reply("200", "OK");
		exit;
	}
#!endif

	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		exit;
	}

	if(is_method("OPTIONS") && uri==myself && $rU==$null) {
		sl_send_reply("200","Keepalive");
		exit;
	}

	if(!sanity_check("1511", "7")) {
		xlog("Malformed SIP message from $si:$sp\n");
		exit;
	}
}

# Handle requests within SIP dialogs
route[WITHINDLG] {
	if (!has_totag()) return;

	# sequential request withing a dialog should
	# take the path determined by record-routing
	if (loose_route()) {
		route(DLGURI);
		if (is_method("BYE")) {
			force_rport();
			#uac_restore_from();
			setflag(FLT_ACC); # do accounting ...
			setflag(FLT_ACCFAILED); # ... even if the transaction fails
			route(DIRECTION);
		} else if ( is_method("ACK") ) {
			# ACK is forwarded statelessy
			route(NATMANAGE);
			$du=$ru;
		} else if ( is_method("NOTIFY") ) {
			# Add Record-Route for in-dialog NOTIFY as per RFC 6665.
			record_route();
		}
		route(RELAY);
		exit;
	}

	if (is_method("SUBSCRIBE") && uri == myself) {
		# in-dialog subscribe requests
		route(BLF);
		exit;
	}
	if ( is_method("ACK") ) {
		if ( t_check_trans() ) {
			# no loose-route, but stateful ACK;
			# must be an ACK after a 487
			# or e.g. 404 from upstream server
			route(RELAY);
			exit;
		} else {
			# ACK without matching transaction ... ignore and discard
			exit;
		}
	}
	sl_send_reply("404","Not here");
	exit;
}

# Handle SIP registrations
route[REGISTRAR] {
	if (!is_method("REGISTER")) return;
	fix_nated_contact();
	fix_nated_register();
	#if(isflagset(FLT_NATS)) {
	#	setbflag(FLB_NATB);
#!ifdef WITH_NATSIPPING
		# do SIP NAT pinging
		setbflag(FLB_NATSIPPING);
#!endif
	#}
	if (!save("location")) {
		sl_reply_error();
	}
	else{
		xlog("L_INFO","register packet from $si:$sp");
	}
	exit;
}

# User location service
route[LOCATION] {

#!ifdef WITH_SPEEDDIAL
	# search for short dialing - 2-digit extension
	if($rU=~"^[0-9][0-9]$") {
		if(sd_lookup("speed_dial")) {
			route(SIPOUT);
		}
	}
#!endif

#!ifdef WITH_ALIASDB
	# search in DB-based aliases
	if(alias_db_lookup("dbaliases")) {
		route(SIPOUT);
	}
#!endif

	$avp(oexten) = $rU;
	if (!lookup("location")) {
		$var(rc) = $rc;
		route(TOVOICEMAIL);
		t_newtran();
		switch ($var(rc)) {
			case -1:
			case -3:
				send_reply("404", "Not Found");
				exit;
			case -2:
				send_reply("405", "Method Not Allowed");
				exit;
		}
	}

	# when routing via usrloc, log the missed calls also
	if (is_method("INVITE")) {
		setflag(FLT_ACCMISSED);
	}

	route(RELAY);
	exit;
}

# Presence server processing
route[PRESENCE] {
	if(!is_method("PUBLISH|SUBSCRIBE")) return;

	if(is_method("SUBSCRIBE") && $hdr(Event)=="message-summary") {
		route(TOVOICEMAIL);
		# returns here if no voicemail server is configured
		sl_send_reply("404", "No voicemail service");
		exit;
	}

#!ifdef WITH_PRESENCE
	if (!t_newtran()) {
		sl_reply_error();
		exit;
	}

	if(is_method("PUBLISH")) {
		handle_publish();
		t_release();
	} else if(is_method("SUBSCRIBE")) {
		handle_subscribe();
		t_release();
	}
	exit;
#!endif

	# if presence enabled, this part will not be executed
	if (is_method("PUBLISH") || $rU==$null) {
		sl_send_reply("404", "Not here");
		exit;
	}
	return;
}

# IP authorization and user authentication
route[AUTH] {
#!ifdef WITH_AUTH

#!ifdef WITH_IPAUTH
	if((!is_method("REGISTER")) && allow_source_address()) {
		# source IP allowed
		return;
	}
#!endif

	if (is_method("REGISTER") || from_uri==myself) {
		# authenticate requests
		if (!auth_check("$fd", "subscriber", "1")) {
			xlog("L_ERROR","Auth try from $si for $fU@$fd");
			auth_challenge("$fd", "0");
			exit;
		}
		# user authenticated - remove auth header
		if(!is_method("REGISTER|PUBLISH"))
			consume_credentials();
	}
	# if caller is not local subscriber, then check if it calls
	# a local destination, otherwise deny, not an open relay here
	#if (from_uri!=myself && uri!=myself) {
		#sl_send_reply("403","Not relaying");
		#exit;
	#}

#!endif
	return;
}

# Caller NAT detection
route[NATDETECT] {
#!ifdef WITH_NAT
	force_rport();
	if (nat_uac_test("19")) {
		if (is_method("REGISTER")) {
			fix_nated_register();
		} else {
#			if(is_first_hop()) {
#				set_contact_alias();
#			}
                        fix_nated_contact();

		}
		setflag(FLT_NATS);
	}
#!endif
	return;
}

# RTPProxy control and signaling updates for NAT traversal
route[NATMANAGE] {
#!ifdef WITH_NAT
	if (is_request()) {
		if(has_totag()) {
			if(check_route_param("nat=yes")) {
				setbflag(FLB_NATB);
			}
		}
	}
	#if (!(isflagset(FLT_NATS) || isbflagset(FLB_NATB))) return;

	
	#if(nat_uac_test("19")) {
		#rtpproxy_manage("co");
		#rtpengine_manage("replace-origin replace-session-connection");
	#}else {
		#rtpproxy_manage("cor");
		#rtpengine_manage("replace-origin replace-session-connection");
	#}

	if (is_request()) {
		if (!has_totag()) {
			if(t_is_branch_route()) {
				add_rr_param(";nat=yes");
			}
		}
	}
	if (is_reply()) {
		
		xlog("L_INFO","{$rm} : {$rs} from $si:$sp ");	
		#if(isbflagset(FLB_NATB)) {
		#	if(is_first_hop())
		#		set_contact_alias();
		#}
		
		#$var(contact_ip)=$(ct{s.select,1,@});
		#if ($(var(contact_ip){s.select,0,:})!=$si){
		#	xlog("L_INFO","{$rm} : {$rs} . Contact IP is $(var(contact_ip){s.select,0,:}) ");		
			if (t_check_status("200"))
			{
				fix_nated_contact();
				
				$avp(destination)=0;
				#sql_pvquery("ca","select destination from mediaservers where destination='$si:$sp'","$avp(destination)");
				#if ($si+":"+$sp!=ASTERISK){
				
				#xlog("L_INFO","{$rm}:{$rs} destination var is $dlg_var(destination) and source is $si:$sp");
				
				#if ($avp(destiantion)==0) {
				#	xlog("L_INFO","{$rm} : {$rs} Fixing contact and SDP ");	
				
				if ($si != LOCALIP ){
			      fix_nated_sdp(10);	
				}
                else
				{
			      xlog("L_INFO","{$rm} : {$rs} reply from asterisk. Leave SDP as it was");	
				}
					
			}
			
		#}
		
	}
#!endif
	return;
}

# URI update for dialog requests
route[DLGURI] {
#!ifdef WITH_NAT
	if(!isdsturiset()) {
		handle_ruri_alias();
	}
#!endif
	return;
}

# Routing to foreign domains
route[SIPOUT] {
	if (uri==myself) return;

	append_hf("P-hint: outbound\r\n");
	route(RELAY);
	exit;
}

# PSTN GW routing
route[PSTN] {
#!ifdef WITH_PSTN
	# check if PSTN GW IP is defined
	if (strempty($sel(cfg_get.pstn.gw_ip))) {
		xlog("SCRIPT: PSTN routing enabled but pstn.gw_ip not defined\n");
		return;
	}

	# route to PSTN dialed numbers starting with '+' or '00'
	#     (international format)
	# - update the condition to match your dialing rules for PSTN routing
	if(!($rU=~"^(\+|00)[1-9][0-9]{3,20}$")) return;

	# only local users allowed to call
	if(from_uri!=myself) {
		sl_send_reply("403", "Not Allowed");
		exit;
	}

	if (strempty($sel(cfg_get.pstn.gw_port))) {
		$ru = "sip:" + $rU + "@" + $sel(cfg_get.pstn.gw_ip);
	} else {
		$ru = "sip:" + $rU + "@" + $sel(cfg_get.pstn.gw_ip) + ":"
					+ $sel(cfg_get.pstn.gw_port);
	}

	route(RELAY);
	exit;
#!endif

	return;
}

# XMLRPC routing
#!ifdef WITH_XMLRPC
route[XMLRPC] {
	# allow XMLRPC from localhost
	if ((method=="POST" || method=="GET")
			&& (src_ip==127.0.0.1)) {
		# close connection only for xmlrpclib user agents (there is a bug in
		# xmlrpclib: it waits for EOF before interpreting the response).
		if ($hdr(User-Agent) =~ "xmlrpclib")
			set_reply_close();
		set_reply_no_connect();
		dispatch_rpc();
		exit;
	}
	send_reply("403", "Forbidden");
	exit;
}
#!endif

# Routing to voicemail server
route[TOVOICEMAIL] {
#!ifdef WITH_VOICEMAIL
	if(!is_method("INVITE|SUBSCRIBE")) return;

	# check if VoiceMail server IP is defined
	if (strempty($sel(cfg_get.voicemail.srv_ip))) {
		xlog("SCRIPT: VoiceMail routing enabled but IP not defined\n");
		return;
	}
	if(is_method("INVITE")) {
		if($avp(oexten)==$null) return;

		$ru = "sip:" + $avp(oexten) + "@" + $sel(cfg_get.voicemail.srv_ip)
				+ ":" + $sel(cfg_get.voicemail.srv_port);
	} else {
		if($rU==$null) return;

		$ru = "sip:" + $rU + "@" + $sel(cfg_get.voicemail.srv_ip)
				+ ":" + $sel(cfg_get.voicemail.srv_port);
	}
	route(RELAY);
	exit;
#!endif

	return;
}

# Manage outgoing branches
branch_route[MANAGE_BRANCH] {
	xdbg("new branch [$T_branch_idx] to $ru\n");
	route(NATMANAGE);
}

# Manage incoming replies
onreply_route[MANAGE_REPLY] {
	#xlog("L_INFO","{$rm}:{$rs} incoming reply");
	if(status=~"[12][0-9][0-9]") {
		route(NATMANAGE);
	}
}



## Manage failure routing cases
#failure_route[MANAGE_FAILURE] {
#	route(NATMANAGE);
#
#	if (t_is_canceled()) exit;
#
##!ifdef WITH_BLOCK3XX
	# block call redirect based on 3xx replies.
#	if (t_check_status("3[0-9][0-9]")) {
#		t_reply("404","Not found");
#		exit;
#	}
##!endif
#
##!ifdef WITH_VOICEMAIL
#	# serial forking
#	# - route to voicemail on busy or no answer (timeout)
#	if (t_check_status("486|408")) {
#		$du = $null;
#		route(TOVOICEMAIL);
#		exit;
#	}
##!endif
#}


############################################################################################################
#################################### failure routes set ####################################################
############################################################################################################

# manage failure routing cases
failure_route[MANAGE_FAILURE] {
	
	route(NATMANAGE);
	
	if (t_check_status("401|407")){
        xlog("L_INFO", "Reply from provider on failure: $tU");
		xlog("L_ERR","401/407 - Unauthorized. ($ci .) ($rm) from ($fu) (IP:$si:$sp) to ($Ri:$Rp). Must be authorized with digest Auth.");
        ##avp_print();	 
		if (uac_auth()) {
			xlog("L_INFO", "CSeq diff: $dlg_var(cseq_diff)");
			t_relay();
		} else {
			xlog("L_INFO", "UAC_AUTH(): credentials not found");
		}
		xlog("L_INFO", "CSeq diff: $dlg_var(cseq_diff)");
        t_relay();
    }

	
	if (t_is_canceled()) {
		exit;
	}

}

route[DIRECTION]{
	xlog("L_INFO","{$rm} from $si:$sp");
	$avp(destination) = 0;
	sql_pvquery("ca","select destination from mediaservers where destination='$si:$sp'","$avp(destination)");
	
	#if ($si+":"+$sp == ASTERISK){
	if ($avp(destination) != 0) {	
	
		$dlg_var(destinaion)="sip:"+$avp(destination);
		
		if (!is_method("BYE")){
		
			xlog("L_INFO","{$rm} from asterisk.");
			if ($hdr(x-trunk)){
			
				if ($hdr(x-reg)){
			
					t_on_failure("MANAGE_FAILURE");
					xlog("L_INFO","This is call through trunk with auth registration method");
				
					$dlg_ctx(timeout_route) = "DIALOG_END";
					$avp(i:10)=43200;
					$dlg_ctx(timeout_bye) = 0;
		
					sql_pvquery("ca","select l_uuid, auth_username, auth_password, realm, l_domain, r_domain, reg_contact from uacreg where id=$hdr(x-trunk)","$avp(uuid), $avp(uname), $avp(passwd), $avp(realm), $avp(src_ipaddr), $avp(dst_ipaddr),$avp(reg_contact)");
					$fu="";
					uac_replace_from("sip:$avp(uname)@$avp(dst_ipaddr)");
					#$fu="sip:"+$avp(uname)+"@"+$avp(dst_ipaddr);
					$tu="sip:"+$tU+"@"+$avp(dst_ipaddr);
					$ru="sip:"+$tU+"@"+$avp(dst_ipaddr);
					remove_hf("Contact");
# 					insert_hf("Contact: <sip:$avp(uname)@$avp(src_ipaddr)>\r\n","Call-ID");
                    $var(contact)="sip:"+$avp(uname)+"@"+$avp(reg_contact);
#                    $var(contact)="sip:"+$avp(uname)+"@"+DOMAIN;
					insert_hf("Contact: <$var(contact)>\r\n","Call-ID");
					xlog("L_INFO","Auth Creditians are $avp(uuid) $avp(uname) $avp(passwd) $avp(realm) ");	

				}
				else
				{
				
					xlog("L_INFO","This is call through trunk direct method");
					
					$dlg_ctx(timeout_route) = "DIALOG_END";
					$avp(i:10)=43200;
					$dlg_ctx(timeout_bye) = 0;	
					
					sql_pvquery("ca","select host,login,fromdomain,todomain,port from uacnoreg where id='$hdr(x-trunk)'","$avp(host),$avp(login),$avp(fromdomain),$avp(todomain),$avp(port)");	

					if ($hdr(x-trunk-callerid)){
						$avp(login)=$hdr(x-trunk-callerid);
					}
					
					xlog("L_INFO","Request method is {$rm} and trunk is $hdr(x-trunk)");
					uac_replace_from("sip:$avp(login)@$avp(fromdomain)");
					uac_replace_to("","sip:$tU@$avp(todomain)");
					$du="sip:"+$avp(host)+":"+$avp(port);
					$ru="sip:"+$tU+"@"+$avp(host)+":"+$avp(port);
					remove_hf("Contact");
# 					insert_hf("Contact: <sip:$avp(login)@$avp(fromdomain)>\r\n","Call-ID");
                    $var(contact)="sip:"+$avp(login)+"@"+EXTERNIP;
#                    $var(contact)="sip:"+$avp(login)+"@"+DOMAIN;
					insert_hf("Contact: <$var(contact)>\r\n","Call-ID");
					xlog("L_INFO","Contact header is {$ct}\n");
					xlog("L_INFO","{$rm} from URI is {$fu} for trunk {$avp(login)} . Destination is $du\n");
							
					
				}
				remove_hf("x-trunk");
					remove_hf("x-reg");
				
			}
			else{
			
				xlog("L_INFO","{$rm} trying to find $tU in location table");
				$ru="sip:"+$tU+"@"+DOMAIN;
				if (!lookup("location")){
				
			
					send_reply("404", "User not registered");
					exit;
				}
			}
		}
		else{	
			$du="sip:"+$tU+"@"+$od+":"+$op;
			xlog("L_INFO","{$rm} will be sent to $du       123456789 $ru");
		}
	}
	else{
		
		if(!is_method("BYE")){
		
			xlog("L_INFO","{$rm} trying to find $fU in subscriber table");
			$avp(id)=0;
            $avp(destinaion)=0;
			sql_pvquery("ca","select froms.id ,m.destination, (case when tos.id is null then extp.port else intp.port end) as port 
                              from subscriber froms 
                              left join mediaservers m on m.id=froms.mediaserver_id
                              left join sip_profiles intp on  intp.id = froms.int_sip_profile_id
                              left join sip_profiles extp on  extp.id = froms.ext_sip_profile_id
                              left join subscriber tos on tos.username='$tU'  
                              where froms.username='$fU'","$avp(id),$avp(destination),$avp(socket_port)");
			xlog("L_INFO","{$rm} id from subscriber $avp(id)");
			if ($avp(id) == 0) {
				$avp(trunk_id)=0;
				sql_pvquery("ca","select t.id, m.destination, p.port from trunks t left join mediaservers m on m.id=t.mediaserver_id left join sip_profiles p on p.id=t.sip_profile_id where t.l_uuid='$tU' or t.noreg_login='$tU'","$avp(trunk_id),$avp(destination),$avp(socket_port)");		
                if ($avp(trunk_id) != 0) {
					insert_hf("x-trunk: $avp(trunk_id)\r\n","Contact");
				}
				else{
					xlog("L_INFO","{$rm} from {$fU} to {$tU} not found");
					exit;
				}
			}
			
			$dlg_ctx(timeout_route) = "DIALOG_END";
			$avp(i:10)=43200;
			$dlg_ctx(timeout_bye) = 0;
           
            #if destination is local ip addr then forsed socket must be a local ip, else internal ip
            if ($avp(destination)=~"127.0.0.1") {
               $dlg_var(socket)="udp:"+LOCALIP+":"+$avp(socket_port);
            }
            else {
               $dlg_var(socket)="udp:"+INTERNIP+":"+$avp(socket_port);
            }
            $fs=$dlg_var(socket);
            xlog("L_INFO","socket is $fs because var with socket is $dlg_var(socket)");
            $avp(destination)="sip:"+$avp(destination);
			$dlg_var(destinaion)=$avp(destination);
				
		}
		else{
			
			if ($dlg_var(destination)){
			   $avp(destination)=$dlg_var(destinaion);
			}
			else{
				sql_pvquery("ca","select mediaserver_id from trunks where r_username='$tU'","$avp(mediaserver_id)");
				if ($avp(mediaserver_id) == 0) {
					$avp(destination)=$ru;
				}
			else{
			   sql_pvquery("ca","select destination from mediaservers where id='$avp(mediaserver_id)'","$avp(bye_dst)");
xlog("L_INFO","{$rm} from extern number must go to asterisk $avp(bye_dst)");
			   $avp(destination)="sip:"+$avp(bye_dst);
}
			}
            
            if ($dlg_var(socket)) {
               $fs=$dlg_var(socket);
               xlog("L_INFO","socket is $fs because var with socket is $dlg_var(socket)");
            }
   
		}
		
		xlog("L_INFO","{$rm} from $si:$sp must go to astersk $avp(destination)");
#		$fs="udp:"+LOCALIP+":5060";
		$du=$avp(destination);
	}
    setflag(FLT_DLGINFO);
    dlg_manage();
	return;
}

route[BLF]
{
	# absorb retransmissions
	if (! t_newtran())
	{
	        sl_reply_error();
	        exit;
	};
 
	if(is_method("PUBLISH"))
	{
		if (handle_publish()) {
           xlog("L_INFO","{$rm} handled");
		};
        t_release();
	} else if( is_method("SUBSCRIBE")) {
       
		if handle_subscribe() {
           xlog("L_INFO","{$rm} handled");
        };
		t_release();
	};
 
	exit;
}

event_route[tm:local-request]{
	if (is_method("REGISTER")){
		sql_pvquery("ca","select contact_uri,reg_contact from uacreg where l_username='$fU'","$avp(contact_uri),$avp(reg_contact)");
        xlog("L_INFO","for URI $fU auth_username is $avp(contact_uri) and contact address is $avp(reg_contact)");
		remove_hf("Contact");
		insert_hf("Contact: <sip:$avp(contact_uri)@$avp(reg_contact):5060>\r\n","Call-ID");		
	};	
    if (is_method("NOTIFY")){
         remove_hf("Contact");
		insert_hf("Contact: <sip:$fU@"+EXTERNIP+">\r\n","Call-ID");
    };	
}



